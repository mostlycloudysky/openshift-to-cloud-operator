/*
Copyright 2025.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package migrate

import (
	"context"
	"strings"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"

	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/log"

	migratev1 "github.com/mostlycloudysky/openshift-to-cloud-operator/api/migrate/v1"
)

// MigrationPlanReconciler reconciles a MigrationPlan object
type MigrationPlanReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

func toSet(items []string) map[string]bool {
	set := make(map[string]bool)
	for _, i := range items {
		set[strings.ToLower(i)] = true
	}
	return set
}

// +kubebuilder:rbac:groups=migrate.migrate.dev,resources=migrationplans,verbs=get;list;watch;create;update;patch;delete
// +kubebuilder:rbac:groups=migrate.migrate.dev,resources=migrationplans/status,verbs=get;update;patch
// +kubebuilder:rbac:groups=migrate.migrate.dev,resources=migrationplans/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the MigrationPlan object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.21.0/pkg/reconcile
func (r *MigrationPlanReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := log.FromContext(ctx)

	// 1. Fetch MigrationPlan
	var plan migratev1.MigrationPlan
	if err := r.Get(ctx, req.NamespacedName, &plan); err != nil {
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// 2. Defaults
	nsList := plan.Spec.Namespaces
	if len(nsList) == 0 {
		nsList = []string{req.Namespace}
	}
	outputName := plan.Spec.OutputConfigMap
	if outputName == "" {
		outputName = plan.Name + "-output"
	}

	// 3. Init
	found := map[string]int{}
	var notes []string
	var yamlDocs []string
	yamlDocs = append(yamlDocs, "# generated by openshift-to-cloud-operator")

	// 4. Loop namespaces + include
	include := toSet(plan.Spec.Include)

	for _, ns := range nsList {
		if include["deploymentconfigs"] {
			docs, count, n := r.convertDeploymentConfigs(ctx, ns)
			yamlDocs = append(yamlDocs, docs...)
			found["deploymentconfigs"] += count
			notes = append(notes, n...)
		}
		if include["routes"] {
			docs, count, n := r.convertRoutes(ctx, ns, plan.Spec.IngressClass)
			yamlDocs = append(yamlDocs, docs...)
			found["routes"] += count
			notes = append(notes, n...)
		}
		if include["services"] {
			docs, count, n := r.convertServices(ctx, ns)
			yamlDocs = append(yamlDocs, docs...)
			found["services"] += count
			notes = append(notes, n...)
		}
		if include["pvcs"] || include["persistentvolumeclaims"] {
			docs, count, n := r.convertPVCs(ctx, ns, plan.Spec.TargetCloud)
			yamlDocs = append(yamlDocs, docs...)
			found["persistentvolumeclaims"] += count
			notes = append(notes, n...)
		}
	}

	// 5. Write ConfigMap
	cm := &corev1.ConfigMap{ObjectMeta: metav1.ObjectMeta{
		Name:      outputName,
		Namespace: req.Namespace,
	}}
	if _, err := controllerutil.CreateOrUpdate(ctx, r.Client, cm, func() error {
		if cm.Data == nil {
			cm.Data = map[string]string{}
		}
		cm.Data["converted.yaml"] = strings.Join(yamlDocs, "\n")
		return nil
	}); err != nil {
		log.Error(err, "failed to create/update ConfigMap")
		return ctrl.Result{}, err
	}

	// 6. Update Status
	plan.Status.Phase = "Generated"
	plan.Status.Found = found
	plan.Status.Notes = notes
	plan.Status.Output = outputName
	if err := r.Status().Update(ctx, &plan); err != nil {
		log.Error(err, "failed to update status")
		return ctrl.Result{}, err
	}

	log.Info("MigrationPlan processed", "name", req.NamespacedName)
	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *MigrationPlanReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&migratev1.MigrationPlan{}).
		Named("migrate-migrationplan").
		Complete(r)
}
